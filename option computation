from scipy.stats import norm
import numpy as np
import math
S = 50
K = 50
r = 0.1
std = 0.4
T = 0.25
q = 0
n = 100


def BS_call(S,r,q,std,T,K):
    nd1 = norm.cdf((np.log(S/K)+(r-q+std**2/2)*T)/std/(T**0.5))
    nd2 = norm.cdf((np.log(S/K)+(r-q-std**2/2)*T)/std/(T**0.5))
    result = S*np.exp(-q*T)*nd1-K*np.exp(-r*T)*nd2
    return result
round(BS_call(S,r,q,std,T,K),4)



def BS_put(S,r,q,std,T,K):
    n_d1 = norm.cdf(-(np.log(S/K)+(r-q+std**2/2)*T)/std/(T**0.5))
    n_d2 = norm.cdf(-(np.log(S/K)+(r-q-std**2/2)*T)/std/(T**0.5))
    result = K*np.exp(-r*T)*n_d2 - S*np.exp(-q*T)*n_d1
    return result
round(BS_put(S,r,q,std,T,K),4)



def BT_eu_call(S,r,q,std,T,K,n):
    
    dt = T/n
    n = n + 1 # n從期數換成node數
    u = np.exp(std*dt**0.5)
    d = np.exp(-std*dt**0.5)
    s = np.zeros((n,n),dtype=float)
    c = np.zeros((n,n),dtype=float)
    p = (np.exp((r-q)*dt)-d)/(u-d)
    
    for i in range(n):
        for j in range(i+1):
            s[i][j]=S*(u**(i-j))*(d**j)
    for j in range(n):
        c[n-1][j]=max(s[n-1][j]-K,0)
    for i in range(n-2,-1,-1):
        for j in range(i+1):
            c[i][j]=np.exp(-r*dt)*(p*c[i+1][j]+(1-p)*c[i+1][j+1])
    result = c[0][0]
    return result,s,c

round(BT_eu_call(S,r,q,std,T,K,n)[0],4)



def BT_eu_put(S,r,q,std,T,K,n):
    
    dt = T/n
    n = n + 1 
    u = np.exp(std*dt**0.5)
    d = np.exp(-std*dt**0.5)
    s = np.zeros((n,n),dtype=float)
    c = np.zeros((n,n),dtype=float)
    p = (np.exp((r-q)*dt)-d)/(u-d)
    
    for i in range(n):
        for j in range(i+1):
            s[i][j]=S*(u**(i-j))*(d**j)
    for j in range(n):
        c[n-1][j]=max(K-s[n-1][j],0)
    for i in range(n-2,-1,-1):
        for j in range(i+1):
            c[i][j]=np.exp(-r*dt)*(p*c[i+1][j]+(1-p)*c[i+1][j+1])
    result = c[0][0]
    return result,s,c

round(BT_eu_put(S,r,q,std,T,K,n)[0],4)


def BT_am_call(S,r,q,std,T,K,n):
    
    dt = T/n
    n = n + 1 
    u = np.exp(std*dt**0.5)
    d = np.exp(-std*dt**0.5)
    s = np.zeros((n,n),dtype=float)
    c = np.zeros((n,n),dtype=float)
    p = (np.exp((r-q)*dt)-d)/(u-d)
    
    for i in range(n):
        for j in range(i+1):
            s[i][j]=S*(u**(i-j))*(d**j)
    for j in range(n):
        c[n-1][j]=max(s[n-1][j]-K,0)
    for i in range(n-2,-1,-1):
        for j in range(i+1):
            c[i][j]=np.exp(-r*dt)*(p*c[i+1][j]+(1-p)*c[i+1][j+1])
            c[i][j]=max(c[i][j],s[i][j]-K)
    result = c[0][0]
    return result,s,c

round(BT_am_call(S,r,q,std,T,K,n)[0],4)


def BT_am_put(S,r,q,std,T,K,n):
    
    dt = T/n
    n = n + 1 
    u = np.exp(std*dt**0.5)
    d = np.exp(-std*dt**0.5)
    s = np.zeros((n,n),dtype=float)
    c = np.zeros((n,n),dtype=float)
    p = (np.exp((r-q)*dt)-d)/(u-d)
    
    for i in range(n):
        for j in range(i+1):
            s[i][j]=S*(u**(i-j))*(d**j)
    for j in range(n):
        c[n-1][j]=max(K-s[n-1][j],0)
    for i in range(n-2,-1,-1):
        for j in range(i+1):
            c[i][j]=np.exp(-r*dt)*(p*c[i+1][j]+(1-p)*c[i+1][j+1])
            c[i][j]=max(c[i][j],K-s[i][j])
    result = c[0][0]
    return result,s,c

round(BT_am_put(S,r,q,std,T,K,n)[0],4)


def BT_eu_call_2(S,r,q,std,T,K,n):
    dt = T/n
    n = n + 1
    u = np.exp(std*dt**0.5)
    d = np.exp(-std*dt**0.5)
    c = np.zeros((n),dtype=float)
    p = (np.exp((r-q)*dt)-d)/(u-d)
    
    for i in range(n):
        c[i]=max(S*(u**(n-1-i))*(d**i)-K,0)
    for j in range(n-2,-1,-1):
        for i in range(j+1):
            c[i]=np.exp(-r*dt)*(p*c[i]+(1-p)*c[i+1])
    result = c[0]
    return result
round(BT_eu_call_2(S,r,q,std,T,K,n),4)


def BT_eu_put_2(S,r,q,std,T,K,n):
    dt = T/n
    n = n + 1
    u = np.exp(std*dt**0.5)
    d = np.exp(-std*dt**0.5)
    c = np.zeros((n),dtype=float)
    p = (np.exp((r-q)*dt)-d)/(u-d)
    
    for i in range(n):
        c[i]=max(K-S*(u**(n-1-i))*(d**i),0)
    for j in range(n-2,-1,-1):
        for i in range(j+1):
            c[i]=np.exp(-r*dt)*(p*c[i]+(1-p)*c[i+1])
    result = c[0]
    return result
round(BT_eu_put_2(S,r,q,std,T,K,n),4)



def BT_am_call_2(S,r,q,std,T,K,n):
    dt = T/n
    n = n + 1
    u = np.exp(std*dt**0.5)
    d = np.exp(-std*dt**0.5)
    c = np.zeros((n),dtype=float)
    p = (np.exp((r-q)*dt)-d)/(u-d)
    for i in range(n):
        c[i] = max(S*(u**(n-1-i))*(d**i)-K,0)
    for j in range(n-2,-1,-1):
        for i in range(j+1):
            c[i]=np.exp(-r*dt)*(p*c[i]+(1-p)*c[i+1])
            c[i]=max(c[i],max(S*(u**(j-i))*(d**i)-K,0))
    result = c[0]
    return result
round(BT_am_call_2(S,r,q,std,T,K,n),4)


def BT_am_put_2(S,r,q,std,T,K,n):
    dt = T/n
    n = n + 1
    u = np.exp(std*dt**0.5)
    d = np.exp(-std*dt**0.5)
    c = np.zeros((n),dtype=float)
    p = (np.exp((r-q)*dt)-d)/(u-d)
    
    for i in range(n):
        c[i]=max(K-S*(u**(n-1-i))*(d**i),0)
    for j in range(n-2,-1,-1):
        for i in range(j+1):
            c[i] = np.exp(-r*dt)*(p*c[i]+(1-p)*c[i+1])
            c[i] = max(c[i],max(K-S*(u**(j-i))*(d**i),0))
    result = c[0]
    return result
round(BT_am_put_2(S,r,q,std,T,K,n),4)


def lnsum(i):
    a=0
    for b in range(1,i+1):
        a=a+math.log(b)
    return a

def BT_eu_call_3(S,r,q,std,T,K,n):
    dt = T/n
    n = n + 1
    u = np.exp(std*dt**0.5)
    d = np.exp(-std*dt**0.5)
    c = 0
    p = (np.exp((r-q)*dt)-d)/(u-d)
    for i in range(n):
        c += np.exp(lnsum(n)-lnsum(i)-lnsum(n-i)+math.log(p)*(n-i)+math.log(1-p)*i)*max(np.exp(math.log(S)+math.log(u)*(n-i)+math.log(d)*i)-K,0)
    result = np.exp(-r*T)*c
    return result

round(BT_eu_call_3(S,r,q,std,T,K,n=1000),4)


def BT_eu_put_3(S,r,q,std,T,K,n):
    dt = T/n
    n = n + 1
    u = np.exp(std*dt**0.5)
    d = np.exp(-std*dt**0.5)
    c = 0
    p = (np.exp((r-q)*dt)-d)/(u-d)
    
    for i in range(n):
        c += np.exp(lnsum(n)-lnsum(i)-lnsum(n-i)+math.log(p)*(n-i)+math.log(1-p)*i)*max(K-np.exp(math.log(S)+math.log(u)*(n-i)+math.log(d)*i),0)
    result = np.exp(-r*T)*c
    return result

round(BT_eu_put_3(S,r,q,std,T,K,n=1000),4)

import pandas as pd
p, s, c = BT_am_put(S,r,q,std,T,K,10)
round(p,3)


sheet1 = pd.DataFrame(s.T).round(2)
sheet1.columns = ['n = '+str(i) for i in range(len(s))]
sheet1

sheet2 = pd.DataFrame(c.T).round(2)
sheet2.columns = ['n = '+str(i) for i in range(len(s))]
sheet2

round(BT_am_put(S=300,r=0.08,q=0.08,std=0.3,T=0.3333,K=300,n=100)[0],2)
round(BT_am_put(S=1.61,r=0.08,q=0.09,std=0.12,T=1,K=1.6,n=100)[0],4)
